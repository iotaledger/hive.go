package identity

import (
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"math/rand"
	"strings"

	"github.com/iotaledger/hive.go/cerrors"
	"github.com/iotaledger/hive.go/crypto/ed25519"
	"github.com/iotaledger/hive.go/marshalutil"
	"github.com/mr-tron/base58"
	"github.com/pkg/errors"
	"golang.org/x/xerrors"
)

// IDLength defines the length of an ID.
const IDLength = sha256.Size

// ID is a unique identifier for each peer.
type ID [IDLength]byte

// NewID computes the ID corresponding to the given public key.
func NewID(key ed25519.PublicKey) ID {
	return sha256.Sum256(key.Bytes())
}

// IDFromMarshalUtil unmarshals an ID using a MarshalUtil (for easier unmarshaling).
func IDFromMarshalUtil(marshalUtil *marshalutil.MarshalUtil) (id ID, err error) {
	idBytes, err := marshalUtil.ReadBytes(IDLength)
	if err != nil {
		err = xerrors.Errorf("failed to parse ID (%v): %w", err, cerrors.ErrParseBytesFailed)
		return
	}

	copy(id[:], idBytes)
	return
}

// Bytes returns the byte slice representation of the ID
func (id ID) Bytes() []byte {
	return id[:]
}

// String returns a shortened version of the ID as a base58 encoded string.
func (id ID) String() string {
	if idAlias, exists := _idAlias[id]; exists {
		return "ID(" + idAlias + ")"
	}

	return base58.Encode(id[:8])
}

// EncodeBase58 returns a full version of the ID as a base58 encoded string.
func (id ID) EncodeBase58() string {
	return base58.Encode(id[:])
}

// DecodeIDBase58 decodes a base58 encoded ID.
func DecodeIDBase58(s string) (ID, error) {
	b, err := base58.Decode(s)
	if err != nil {
		return ID{}, errors.Wrap(err, "failed to decode ID from base58 string")
	}
	var id ID
	copy(id[:], b)
	return id, nil
}

// ParseID parses a hex encoded ID.
func ParseID(s string) (ID, error) {
	var id ID
	b, err := hex.DecodeString(strings.TrimPrefix(s, "0x"))
	if err != nil {
		return id, err
	}
	if len(b) != len(ID{}) {
		return id, fmt.Errorf("invalid length: need %d hex chars", hex.EncodedLen(len(ID{})))
	}
	copy(id[:], b)
	return id, nil
}

// RandomID creates a random id which can for example be used in unit tests.
func RandomID() (id ID, err error) {
	// generate a random sequence of bytes
	idBytes := make([]byte, sha256.Size)
	if _, err = rand.Read(idBytes); err != nil {
		return
	}

	// copy the generated bytes into the result
	copy(id[:], idBytes)

	return
}

// _idAliases contains a list of aliases registered for a set of IDs.
var _idAlias = make(map[ID]string)

// RegisterIDAlias registers an alias that will modify the String() output of the ID to show a human
// readable string instead of the base58 encoded version of itself.
func RegisterIDAlias(id ID, alias string) {
	_idAlias[id] = alias
}

// UnregisterIDAliases removes all aliases registered through the RegisterIDAlias function.
func UnregisterIDAliases() {
	_idAlias = make(map[ID]string)
}

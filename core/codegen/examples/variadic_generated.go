// Code generated by go generate; DO NOT EDIT.
package examples

import (
	"fmt"
)

// Event1 is an event with 1 generic parameters.
type Event1[T1 any] struct {
}

// New1 creates a new Event1 object.
func New1[T1 any]() *Event1[T1] {
	return &Event1[T1] {}
}

// Trigger invokes the hooked callbacks with the given parameters.
func (e *Event1[T1]) Trigger(arg1 T1) {
	fmt.Println(arg1)
}

// Event2 is an event with 2 generic parameters.
type Event2[T1, T2 any] struct {
}

// New2 creates a new Event2 object.
func New2[T1, T2 any]() *Event2[T1, T2] {
	return &Event2[T1, T2] {}
}

// Trigger invokes the hooked callbacks with the given parameters.
func (e *Event2[T1, T2]) Trigger(arg1 T1, arg2 T2) {
	fmt.Println(arg1, arg2)
}

// Event3 is an event with 3 generic parameters.
type Event3[T1, T2, T3 any] struct {
}

// New3 creates a new Event3 object.
func New3[T1, T2, T3 any]() *Event3[T1, T2, T3] {
	return &Event3[T1, T2, T3] {}
}

// Trigger invokes the hooked callbacks with the given parameters.
func (e *Event3[T1, T2, T3]) Trigger(arg1 T1, arg2 T2, arg3 T3) {
	fmt.Println(arg1, arg2, arg3)
}

// Event4 is an event with 4 generic parameters.
type Event4[T1, T2, T3, T4 any] struct {
}

// New4 creates a new Event4 object.
func New4[T1, T2, T3, T4 any]() *Event4[T1, T2, T3, T4] {
	return &Event4[T1, T2, T3, T4] {}
}

// Trigger invokes the hooked callbacks with the given parameters.
func (e *Event4[T1, T2, T3, T4]) Trigger(arg1 T1, arg2 T2, arg3 T3, arg4 T4) {
	fmt.Println(arg1, arg2, arg3, arg4)
}

// Event5 is an event with 5 generic parameters.
type Event5[T1, T2, T3, T4, T5 any] struct {
}

// New5 creates a new Event5 object.
func New5[T1, T2, T3, T4, T5 any]() *Event5[T1, T2, T3, T4, T5] {
	return &Event5[T1, T2, T3, T4, T5] {}
}

// Trigger invokes the hooked callbacks with the given parameters.
func (e *Event5[T1, T2, T3, T4, T5]) Trigger(arg1 T1, arg2 T2, arg3 T3, arg4 T4, arg5 T5) {
	fmt.Println(arg1, arg2, arg3, arg4, arg5)
}
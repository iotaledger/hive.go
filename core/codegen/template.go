package codegen

import (
	"os"
	"regexp"
	"strings"

	"github.com/cockroachdb/errors"

	"github.com/iotaledger/hive.go/core/generics/lo"
)

// Template is a struct that can be used to transcribe "go generate" templates by rewriting a set of tokens.
type Template struct {
	// Header contains the Header of the file above the "go generate" statement.
	Header string

	// Content contains the Content of the file below the "go generate" statement.
	Content string

	// TokenMappings is a set of tokens that are being replaced when transcribing the Content.
	TokenMappings map[string]string
}

// NewTemplate creates a new Template with the given token mappings.
func NewTemplate(tokenMappings map[string]string) *Template {
	return &Template{
		TokenMappings: tokenMappings,
	}
}

// Parse parses the given file and extracts the Header and Content by splitting the file at the "go:generate" directive.
func (t *Template) Parse(fileName string) error {
	readFile, err := os.ReadFile(fileName)
	if err != nil {
		return errors.Errorf("could not read file %s: %w", fileName, err)
	}

	splitTemplate := strings.Split(string(readFile), "//go:generate")
	if len(splitTemplate) != 2 {
		return errors.Errorf("could not find go:generate directive in %s", fileName)
	}

	t.Header = strings.TrimSpace(strings.ReplaceAll(splitTemplate[0], "//go:build ignore", ""))
	t.Content = strings.TrimSpace(splitTemplate[1][strings.Index(splitTemplate[1], "\n"):])

	return nil
}

// Transcribe writes the transcribed template to the given file.
func (t *Template) Transcribe(fileName string, transcribeFunc ...func() string) error {
	return os.WriteFile(fileName, []byte(strings.Join([]string{
		generatedFileHeader + t.Header,
		lo.First(transcribeFunc, t.TranscribeContent)(),
	}, "\n\n")), 0644)
}

// TranscribeContent translates the tokens in the dynamic content to the mapped ones from the tokenMappings.
func (t *Template) TranscribeContent() string {
	content := string(regexp.MustCompile(`\s*/\*-`).ReplaceAll([]byte(t.Content), []byte("/*")))
	content = string(regexp.MustCompile(`-\*/\s*`).ReplaceAll([]byte(content), []byte("*/")))

	for token, replacement := range t.TokenMappings {
		content = strings.ReplaceAll(content, "/*"+token+"*/", replacement)
	}

	return content
}

// generatedFileHeader is the header that is being added to the top of the generated file.
const generatedFileHeader = "// Code generated by go generate; DO NOT EDIT.\n"
